<?php/** * @package    block_evalcomix * @copyright  2010 onwards EVALfor Research Group {@link http://evalfor.net/} * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later * @author     Daniel Cabeza Sánchez <daniel.cabeza@uca.es>, Juan Antonio Caballero Hernández <juanantonio.caballero@uca.es> */ include_once('icalculator.php');//include_once($CFG->dirroot . '/blocks/evalcomix/classes/icalculator.php');/*** It defined "calculate" method of "icalculator" as average operation*/class calculator_average implements icalculator{	/**	* It works out the average between elements of array $grades1 and $grades2	* $activities and $users to travel the element arrays	* @param array $grades1 --> moodle grades	* @param array $grades2 --> evalcomix grades	* @param array $activities	* @param array $users it contains users' objects	* @return array averages	*/	public function calculate($grades1, $grades2, $activities, $users){		global $DB;		$averages = array();		//Obtains the weighing to calculate the average foreach activity		for ($i = 0; $i < count($activities['id']); $i++){			//$task = $DB->get_record('block_evalcomix_tasks', array('instanceid' => $activities['id'][$i]));			$task = $DB->get_record('block_evalcomix_tasks', array('instanceid' => $activities['id'][$i]));						//si la actividad esta configurada en evalcomix			if ($task){				$grade1weighing = (100 - $task->weighing) / 100;				$grade2weighing = $task->weighing / 100;			}			else{ //si no existe				$grade1weighing = 100;				$grade2weighing = 0;			}						foreach($users as $user){				//Calculates average foreach user								//si existen las notas de moodle y evalcomix				if (isset($grades1[$activities['id'][$i]][$user->id]) && isset($grades2[$activities['id'][$i]][$user->id])){					$grade1 = $grades1[$activities['id'][$i]][$user->id] * $grade1weighing;					$grade2 = $grades2[$activities['id'][$i]][$user->id] * $grade2weighing;					$average = $grade1 + $grade2;										$averages[$activities['id'][$i]][$user->id] = round($average, 2, PHP_ROUND_HALF_UP);				}				//si existe nota de moodle y no existe nota de evalcomix				elseif (isset($grades1[$activities['id'][$i]][$user->id]) && !isset($grades2[$activities['id'][$i]][$user->id])){					$average = $grades1[$activities['id'][$i]][$user->id];					$averages[$activities['id'][$i]][$user->id] = round($average, 2, PHP_ROUND_HALF_UP);				}				//si no existe nota de moodle y existe nota de evalcomix				elseif (!isset($grades1[$activities['id'][$i]][$user->id]) && isset($grades2[$activities['id'][$i]][$user->id])){					$average = $grades2[$activities['id'][$i]][$user->id];					$averages[$activities['id'][$i]][$user->id] = round($average, 2, PHP_ROUND_HALF_UP);				}								}		}		return $averages;	}		/**	* It works out the average between elements of array $grades	* @param array $grades	* @return float average	*/	public static function calculate_one_array($grades){		$average = array_sum($grades) / count($grades);		return $average;	}}?>