<?php/** * Unit tests for blocks/calamardo/classes/evalcomix.php * * @license http://www.gnu.org/licenses/gpl-2.0.html GNU GPL v2 or later * @package block-evalcomix *//*if (!defined('MOODLE_INTERNAL')) {    die('Direct access to this script is forbidden.'); //  It must be included from a Moodle page}*/require_once(dirname(__FILE__) . '/../classes/evalcomix.php');require_once(dirname(__FILE__) . '/../../../config.php');require_once(dirname(__FILE__) . '/testblockevalcomix.php');//require_once($CFG->dirroot.'/grade/edit/tree/lib.php');//This require: global $CFG;class evalcomix_test extends blockevalcomix_test {	function test_evalcomix() {        $this->sub_test_evalcomix_constructor_ok();        $this->sub_test_evalcomix_constructor_fail();        $this->sub_test_evalcomix_fetch_all();        $this->sub_test_evalcomix_fetchall_fail();        $this->sub_test_evalcomix_fetch_fail();        $this->sub_test_evalcomix_fetch_ok();		//Falta probar insert, update, delete    }	//public  static $includecoverage = array('evalcomix/simpletest');	/**	* Object construction	*/	public function sub_test_evalcomix_constructor_ok() {		//passing correct values - (viewmode == 'evalcomix' && sendgradebook == 0)		$courseid = $this->courseid;		$viewmode = 'evalcomix';		$sendgradebook = '0';				$objectnew = new evalcomix('', $courseid, $viewmode, $sendgradebook);		$this->assertEqual($courseid, $evalcomix->courseid);		$this->assertEqual($viewmode, $evalcomix->viewmode);		$this->assertEqual($sendgradebook, $evalcomix->sendgradebook);		unset($objectnew);				//passing correct values - (viewmode == 'evalmoodle' && sendgradebook == 0)		$courseid = $this->courseid;		$viewmode = 'evalmoodle';		$sendgradebook = '0';				$objectnew = new evalcomix('', $courseid, $viewmode, $sendgradebook);		$this->assertEqual($courseid, $evalcomix->courseid);		$this->assertEqual($viewmode, $evalcomix->viewmode);		$this->assertEqual($sendgradebook, $evalcomix->sendgradebook);		unset($objectnew);				//passing correct values - (viewmode == 'evalcomix' && sendgradebook == 1)		$courseid = $this->courseid;		$viewmode = 'evalcomix';		$sendgradebook = '1';				$objectnew = new evalcomix('', $courseid, $viewmode, $sendgradebook);		$this->assertEqual($courseid, $evalcomix->courseid);		$this->assertEqual($viewmode, $evalcomix->viewmode);		$this->assertEqual($sendgradebook, $evalcomix->sendgradebook);		unset($objectnew);				//No values		$courseid = '0';		$viewmode = 'evalcomix';		$sendgradebook = '0';				$objectnew = new evalcomix();		$this->assertEqual($courseid, $evalcomix->courseid);		$this->assertEqual($viewmode, $evalcomix->viewmode);		$this->assertEqual($sendgradebook, $evalcomix->sendgradebook);		unset($objectnew);	}		/**	* Object construction with wrong required param 'viewmode'. It should throw a 'dml_missing_record_exception' exception	*/	public function sub_test_evalcomix_constructor_fail() {		//viewmode wrong		$courseid = $this->courseid;		$viewmode = 'evalwrong';		$sendgradebook = '0';				$this->expectException('dml_missing_record_exception');		$objectnew = new evalcomix('', $courseid, $viewmode, $sendgradebook);		unset($objectnew);				//courseid wrong		$courseid = '23478374910983748128843974';		$viewmode = 'evalcomix';		$sendgradebook = '0';				$this->expectException('dml_missing_record_exception');		$objectnew = new evalcomix('', $courseid, $viewmode, $sendgradebook);		unset($objectnew);	}		function sub_test_evalcomix_fetch_all(){		$evalcomix = new evalcomix();        $this->assertTrue(method_exists($evalcomix, 'fetch_all'));        $environments = evalcomix::fetch_all(array());        $this->assertEqual(count($this->evalcomix), count($environments));	}		/**	* Fetch all evalcomix objects with a required not existing param	*/	public function sub_test_evalcomix_fetchall_fail() {		$params = array('viewmode'=>'evalwrong');		$result = evalcomix::fetch_all($params);		$this->assertFalse($result);		unset($params, $result);	}			/**	* Fetch an object with no unique params. Return false	*/	public function sub_test_evalcomix_fetch_fail() {	    $this->expectException('moodle_exception');		$params = array('viewmode'=>'evalcomixotro');		$result = evalcomix::fetch($params);		unset($params, $result);		//$this->assertFalse($result);	}			/**	* Fetch all objects. Return the object with the required params	*/	public function sub_test_evalcomix_fetch_ok() {		$objectnew = new evalcomix();        $this->assertTrue(method_exists($objectnew, 'fetch'));        $grades = evalcomix::fetch(array('id'=>$this->evalcomix[0]->id));        $this->assertEqual($this->evalcomix[0]->id, $objectnew->id);	}	}