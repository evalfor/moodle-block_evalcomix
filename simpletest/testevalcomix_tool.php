<?php/** * Unit tests for blocks/evalcomix/classes/evalcomix_tool.php * * @license http://www.gnu.org/licenses/gpl-2.0.html GNU GPL v2 or later * @package block-evalcomix *//*if (!defined('MOODLE_INTERNAL')) {    die('Direct access to this script is forbidden.'); //  It must be included from a Moodle page}*/require_once(dirname(__FILE__) . '/../classes/evalcomix_tool.php');require_once(dirname(__FILE__) . '/../../../config.php');require_once(dirname(__FILE__) . '/testblockevalcomix.php');//require_once($CFG->dirroot.'/grade/edit/tree/lib.php');//This require: global $CFG;class evalcomix_tool_test extends blockevalcomix_test {	function test_evalcomix_tool() {        $this->sub_test_evalcomix_tool_constructor_ok();        $this->sub_test_evalcomix_tool_constructor_fail_1();		$this->sub_test_evalcomix_tool_constructor_fail_2();        $this->sub_test_evalcomix_tool_fetch_all();        $this->sub_test_evalcomix_tool_fetchall_fail();        $this->sub_test_evalcomix_tool_fetch_fail();        $this->sub_test_evalcomix_tool_fetch_ok();		$this->sub_test_evalcomix_tool_insert_ok();		$this->sub_test_evalcomix_tool_insert_fail_1();		$this->sub_test_evalcomix_tool_update_ok();		$this->test_one_param_update_ok();		$this->test_more_than_one_param_update_ok();		$this->sub_test_evalcomix_tool_gettools_ok();		$this->sub_test_evalcomix_tool_gettools_fail();		$this->sub_test_evalcomix_tool_getnumericscale_ok();		$this->sub_test_evalcomix_tool_getnumericscale_fail();		//Falta probar delete    }	/**	* Object construction without the required param 'type'. It should throw a 'moodle_exception' exception	*/	public function sub_test_evalcomix_tool_constructor_fail_1() {		$this->expectException('moodle_exception');		$objectnew = new evalcomix_tool('', '1', 'titulo del instrumento');		unset($objectnew);	}			/**	* Object construction with wrong required param 'type'. It should throw a 'moodle_exception' exception	*/	public function sub_test_evalcomix_tool_constructor_fail_2() {		$this->expectException('moodle_exception');		$objectnew = new evalcomix_tool('', '1', 'titulo del instrumento', 'ESCALA');		unset($objectnew);	}			/**	* Object construction with all the required params. The object instance must be create	*/	public function sub_test_evalcomix_tool_construction_ok() {		//with params		$evxid = $this->evalcomix[0]->id;		$title = 'prueba';		$type =  'scale';		$idtool = '1_pla';		$objectnew = new evalcomix_tool('', $evxid, $title, $type, $idtool);		$this->assertEqual($evxid, $objectnew->evxid);		$this->assertEqual($title, $objectnew->title);		$this->assertEqual($type, $objectnew->type);		$this->assertEqual($idtool, $objectnew->idtool);		unset($objectnew);				//No params		$evxid = '0';		$title = '';		$type =  '';		$idtool = '0';		$objectnew = new evalcomix_tool();		$this->assertEqual($evxid, $objectnew->evxid);		$this->assertEqual($title, $objectnew->title);		$this->assertEqual($type, $objectnew->type);		$this->assertEqual($idtool, $objectnew->idtool);		unset($objectnew);	}	/**	* Fetch all objects with a required not existing param	*/	public function sub_test_evalcomix_tool_fetchall_fail() {		$params = array('title'=>'holamundo');		$result = evalcomix_tool::fetch_all($params);		$this->assertFalse($result);		unset($params, $result);	}			/**	* Fetch all objects. Return an array with the required params	*/	public function sub_test_evalcomix_tool_fetchall_ok() {		$evalcomix_tool = new evalcomix_tool();        $this->assertTrue(method_exists($evalcomix_tool, 'fetch_all'));        $tools = evalcomix_tool::fetch_all(array());        $this->assertEqual(count($this->evalcomix_tools), count($tools));	}		/**	* Fetch an object with no unique params. Return false	*/	public function sub_test_evalcomix_tool_fetch_fail() {		$params = array('title'=>'holamundo');		$result = evalcomix_tool::fetch($params);		$this->assertFalse($result);		unset($params, $result);	}			/**	* Fetch all objects. Return the object with the required params	*/	public function sub_test_evalcomix_tool_fetch_ok() {		$objectnew = new evalcomix_tool();        $this->assertTrue(method_exists($objectnew, 'fetch'));        $grades = evalcomix::fetch(array('id'=>$this->evalcomix_tools[0]->id));        $this->assertEqual($this->evalcomix[0]->id, $objectnew->id);	}			/**	* Non-existing object insert in a DB 	*/	public function sub_test_evalcomix_tool_insert_ok() {		$objectnew = new evalcomix_tool();        $this->assertTrue(method_exists($objectnew, 'insert'));        $objectnew->evxid = $this->evalcomix[0]->id;        $objectnew->title = 'prueba';        $objectnew->type = 'scale';        $objectnew->idtool = '1_pla';        $objectnew->insert();        $last_evalcomix_tool = end($this->evalcomix_tools);        $this->assertEqual($objectnew->id, $last_evalcomix_tool->id + 1);		$this->assertEqual($objectmodified->timemodified,'0');        //keep our reference collection the same as what is in the database        $this->evalcomix_tools[] = $objectnew;	}	/**	* $evxid not exists in 'block_evalcomix' DB 	*/	public function sub_test_evalcomix_tool_insert_fail_1() {		$this->expectException('dml_write_exception');		$objectnew = new evalcomix_tool('', 'AAA', 'titulo', 'scale');		$objectnew->insert();		unset($objectnew);	}			/**	* Update a recently insert object in the DB	*/	public function sub_test_evalcomix_tool_update_ok() {		global $DB;        $objectnew = new evalcomix_tool($this->evalcomix_tool[0]->id, $this->evalcomix_tool[0]->evxid, $this->evalcomix_tool[0]->title, $this->evalcomix_tool[0]->type, $this->evalcomix_tool[0]->idtool);        $this->assertTrue(method_exists($objectnew, 'update'));        $this->assertTrue($objectnew->update());        $objectnew->title = 'Título modificado';        $this->assertTrue($objectnew->update());		$this->assertNotEqual($objectnew->timecreated,'0');		$this->assertNotEqual($objectmodified->timemodified,'0');	}		/**	* Update one param	*/	public function test_one_param_update_ok() {		global $DB;        $objectnew = new evalcomix_tool($this->evalcomix_tool[0]->id, $this->evalcomix_tool[0]->evxid, $this->evalcomix_tool[0]->title, $this->evalcomix_tool[0]->type, $this->evalcomix_tool[0]->idtool);        $this->assertTrue(method_exists($objectnew, 'update'));		$params = array('title'=>'hola');		evalcomix_tool::set_properties($objectnew, $params);		$this->assertTrue($objectnew->update());	}		/**	* Update more than one param	*/	public function test_more_than_one_param_update_ok() {		global $DB;        $objectnew = new evalcomix_tool($this->evalcomix_tool[0]->id, $this->evalcomix_tool[0]->evxid, $this->evalcomix_tool[0]->title, $this->evalcomix_tool[0]->type, $this->evalcomix_tool[0]->idtool);        $this->assertTrue(method_exists($objectnew, 'update'));		$params = array('title'=>'helloeveryone','type'=>'rubric','idtool'=>'12_plaSIMPLETEST');		evalcomix_tool::set_properties($objectnew, $params);		$this->assertTrue($objectnew->update());	}		/**	* Obtains array of tools	*/	public function sub_test_evalcomix_tool_gettools_ok() {		$result = evalcomix_tool::get_tools($this->courseid);		$this->assertIsA($result,'array');		$this->assertEqual(count($this->evalcomix_tools), count($result));		unset($result);	}		/**	* Get tools from a not existing course	*/	public function sub_test_evalcomix_tool_gettools_fail() {		$result = evalcomix_tool::get_tools('5374837084783748738000');		$zero = sizeof($result);		$this->assertEqual($zero,'0');		unset($result, $zero);	}		/**	* Converts $scale in numeric $scale from 0 to 100	*/	public function sub_test_evalcomix_tool_getnumericscale_ok() {		$escala = array('0','25','50');		$result = evalcomix_tool::get_numeric_scale($escala);		$this->assertIsA($result,'array');		unset($result);	}		/**	* Converts $scale in numeric $scale from 0 to 100. Fails because we don't pass an array	*/	public function sub_test_evalcomix_tool_getnumericscale_fail() {		$result = evalcomix_tool::get_numeric_scale('A');		$this->assertFalse($result);		unset($result);	}			/**	* Return array with grade of each attribute of the tool	*/	/*public function test_getattributesgrade_ok() {		$xml = simplexml_load_file('http://lince.uca.es/evalfor/moodle21/blocks/evalcomix/simpletest/p.evx');		$result = evalcomix_tool::get_attributes_grade($xml);		$this->assertIsA($result,'array');		unset($xml,$result);	}*/		/**	* Return array with grade of each attribute of the tool. Fails because the file doesn't exists	*/	/*public function test_getattributesgrade_fail() {		$xml = simplexml_load_file('http://lince.uca.es/evalfor/moodle21/blocks/evalcomix/simpletest/ppp.evx');		$result = evalcomix_tool::get_attributes_grade($xml);		$this->assertFalse($result);		unset($xml,$result);	}*/		/**	* Return array with grade of each attribute of a simple tool	*/	/*public function test_getattributesgradesimpletool_ok() {		$xml = simplexml_load_file('http://lince.uca.es/evalfor/moodle21/blocks/evalcomix/simpletest/p.evx');		$result = evalcomix_tool::get_attributes_grade_simpletool($xml);		$this->assertIsA($result,'array');		unset($xml,$result);	}*/		/**	* Return array with grade of each attribute of a simple tool. Fails because the file doesn't exists	*/	/*public function test_getattributesgradesimpletool_fail() {		$xml = simplexml_load_file('http://lince.uca.es/evalfor/moodle21/blocks/evalcomix/simpletest/ppp.evx');		$result = evalcomix_tool::get_attributes_grade_simpletool($xml);		$this->assertFalse($result);		unset($xml,$result);	}*/		}