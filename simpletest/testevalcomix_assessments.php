<?php/** * Unit tests for blocks/calamardo/classes/evalcomix_assessments.php * * @license http://www.gnu.org/licenses/gpl-2.0.html GNU GPL v2 or later * @package block-evalcomix *//*if (!defined('MOODLE_INTERNAL')) {    die('Direct access to this script is forbidden.'); //  It must be included from a Moodle page}*/require_once(dirname(__FILE__) . '/../classes/evalcomix_assessments.php');require_once(dirname(__FILE__) . '/../../../config.php');//require_once($CFG->dirroot.'/grade/edit/tree/lib.php');//This require: global $CFG;class evalcomix_assessments_test extends UnitTestCase {	/**	* Object construction. The object instance must be create	*/	public function test_construction_ok() {		$objectnew = new evalcomix_assessments();		$this->assertNotNull($objectnew);		unset($objectnew);	}		/**	* Object construction with an existing 'taskid'. The object instance must be create	*/	public function test_construction_ok_2() {		global $DB;		$ok = false;		for($i = 1 ; $i <= 100 ; $i++) {			if($ok == false) {				$task = $DB->get_record('block_evalcomix_tasks', array('id'=>$i), '*', MUST_EXIST);				$taskid = $task->id;				$ok = true;				}		}		$objectnew = new evalcomix_assessments('',$taskid);		$this->assertNotNull($objectnew);		unset($objectnew, $ok, $task, $taskid);	}		/**	* Object construction with wrong required param 'taskid'. It should throw a 'moodle_exception' exception	*/	public function test_constructor_fail_1() {		//$this->expectException('moodle_exception');		$objectnew = new evalcomix_assessments('', 'AA');		$this->assertEqual($objectnew->taskid,0);		unset($objectnew);	}			/**	* Object construction with wrong required param 'assessorid'. It should throw a 'moodle_exception' exception	*/	public function test_constructor_fail_2() {		//$this->expectException('moodle_exception');		$objectnew = new evalcomix_assessments('', '','AA');		$this->assertEqual($objectnew->assessorid,0);		unset($objectnew);	}	/**	* Object construction with wrong required param 'studentid'. It should throw a 'moodle_exception' exception	*/	public function test_constructor_fail_3() {		//$this->expectException('moodle_exception');		$objectnew = new evalcomix_assessments('', '','','AA');		$this->assertEqual($objectnew->studentid,0);		unset($objectnew);	}				/**	* Fetch all objects with a required not existing param	*/	public function test_fetchall_fail() {		$params = array('taskid'=>'2000101010');		$result = evalcomix_assessments::fetch_all($params);		$this->assertFalse($result);		unset($params,$result);	}			/**	* Fetch all objects. Return an array with the required params	*/	public function test_fetchall_ok() {		$params = array('taskid'=>'5');		$result = evalcomix_assessments::fetch_all($params);		$this->assertIsA($result,'array');		unset($params,$result);	}			/**	* Update object in the DB. Return false because the object is not in the DB	*/	public function test_update_fail() {		//$this->expectException('moodle_exception');		$objectnew = new evalcomix_assessments('',5,4,4,367);		$id = $objectnew->update();		$this->assertFalse($id);		unset($objectnew, $id);	}		/**	* Update a recently insert object in the DB. Param 'timemodified' change	*/	public function test_update_ok() {		$objectnew = new evalcomix_assessments('',5,4,5,60);		$objectnew->insert();		$id = $objectnew->update();		$this->assertTrue($id);		$objectnew->delete();		unset($objectnew, $id);	}		/**	* Update one param	*/	public function test_one_param_update_ok() {		$objectnew = new evalcomix_assessments('',6,5,3,250);		$objectnew->insert();		$params = array('studentid'=>'5');		evalcomix_tool::set_properties($objectnew, $params);		$id = $objectnew->update();		$this->assertTrue($id);		$objectnew->delete();		unset($objectnew, $id, $params);	}		/**	* Update more than one param	*/	public function test_more_than_one_param_update_ok() {		$objectnew = new evalcomix_assessments('',5,5,3,410);		$objectnew->insert();		$params = array('assessorid'=>'4','studentid'=>'5');		evalcomix_tool::set_properties($objectnew, $params);		$id = $objectnew->update();		$this->assertTrue($id);		$objectnew->delete();		unset($objectnew, $id, $params);	}			/**	* Get final grade	*/	public function test_getfinalgrade_ok() {		$idusers = array('3','4');		$idcourse = 14;		$result = evalcomix_assessments::get_final_grade($idcourse, $idusers);		$this->assertIsA($result,'array');		unset($idusers, $idcourse, $result);	}		/**	* Get final grade from a not existing course	*/	public function test_getfinalgrade_fail() {		$idusers = array('2','4');		$idcourse = 22;		$result = evalcomix_assessments::get_final_grade($idcourse, $idusers);		$zero = sizeof($result);		$this->assertEqual($zero,'0');		unset($idusers, $idcourse, $result, $zero);	}	/**	* Get assessments by modality	*/	public function test_get_assessments_by_modality() {		$idtask = '3';		$iduser = '3';		$result = evalcomix_assessments::get_assessments_by_modality($idtask, $iduser);		$this->assertIsA($result,'stdClass');		unset($idtask, $iduser, $result);			}		/**	* Get assessments by modality fail	*/	public function test_get_assessments_by_modality_fail() {		$idtask = '3';		$iduser = '8';		$result = evalcomix_assessments::get_assessments_by_modality($idtask, $iduser);		$this->assertIsA($result,'boolean');		unset($idtask, $iduser, $result);	}		/**	* Calculate gradearray	*/		public function test_calculate_gradearray(){		$assess1 = evalcomix_assessments::fetch_all(array('studentid' => '3', 'taskid' => '3'));		$result = evalcomix_assessments::calculate_gradearray($assess1);		$this->assertIsA($result,'double');		unset($assess1, $result);	}		/**	* Calculate gradearray fail	*/		public function test_calculate_gradearray_fail(){		$assess1 = evalcomix_assessments::fetch_all(array('studentid' => '14', 'taskid' => '13'));		$result = evalcomix_assessments::calculate_gradearray($assess1);		$this->assertIsA($result,'boolean');		unset($assess1, $result);	}		/**	* Get students assessed	*/	public function test_get_students_assessed(){		$result = evalcomix_assessments::get_students_assessed('3');		$this->assertIsA($result,'array');        unset($result);			}		/**	* Get students assessed fail	*/	public function test_get_students_assessed_fail(){		$result = evalcomix_assessments::get_students_assessed('13');		$this->assertIsA($result,'boolean');        unset($result);			}		public function	test_get_grade_by_user_task(){		$result = evalcomix_assessments::get_grade_by_user_task('2','3');		$this->assertIsA($result,'evalcomix_assessments');        unset($result);	}		public function	test_get_grade_by_user_task_fail(){		$result = evalcomix_assessments::get_grade_by_user_task('13','3');		$this->assertIsA($result,'boolean');        unset($result);	}	}