<?php/** * Unit tests for blocks/calamardo/classes/evalcomix_modes.php * * @license http://www.gnu.org/licenses/gpl-2.0.html GNU GPL v2 or later * @package block-evalcomix *//*if (!defined('MOODLE_INTERNAL')) {    die('Direct access to this script is forbidden.'); //  It must be included from a Moodle page}*/require_once(dirname(__FILE__) . '/../classes/evalcomix_modes.php');require_once(dirname(__FILE__) . '/../../../config.php');//require_once($CFG->dirroot.'/grade/edit/tree/lib.php');//This require: global $CFG;class evalcomix_modes_test extends UnitTestCase {	/**	* Object construction with no params. The object instance must be create	*/	public function test_construction_ok() {		$objectnew = new evalcomix_modes();		$this->assertNotNull($objectnew);		unset($objectnew);	}	/**	* Object construction with all the required params. The object instance must be create	*/	public function test_construction_ok_2() {		$objectnew = new evalcomix_modes('', '11', '14', 'peer','80');		$this->assertNotNull($objectnew);		unset($objectnew);	}		/**	* Object construction with wrong required param 'weighing'. It should throw a 'moodle_exception' exception	*/	public function test_constructor_fail_1() {		//$this->expectException('moodle_exception');		$objectnew = new evalcomix_modes('', '', '', '','120');		//$this->expectError($objectnew);		$this->assertNotNull($objectnew);		unset($objectnew);	}			/**	* Object construction with wrong required param 'toolid'. It should throw a 'moodle_exception'	*/	public function test_construction_fail_2() {	    $this->expectException('moodle_exception');		$objectnew = new evalcomix_modes('', '11', '129', 'peer','80');		//$this->assertNotNull($objectnew);		unset($objectnew);	}	/**	* Object construction with wrong required param 'taskid'. It should throw a 'moodle_exception'	*/	public function test_construction_fail_3() {	    $this->expectException('moodle_exception');		$objectnew = new evalcomix_modes('', '6', '121', 'peer','80');		//$this->assertNotNull($objectnew);		unset($objectnew);	}		/**	* Object construction with wrong required param 'modality'. It should throw a 'moodle_exception' exception	*/	public function test_constructor_fail_4() {	//	$this->expectException('moodle_exception');		$objectnew = new evalcomix_modes('', '', '', 'alumno');		$this->assertNotNull($objectnew);		unset($objectnew);	}				/**	* Object construction with no required param 'toolid' and 'taskid'. It should throw a 'moodle_exception'???	*/	public function test_construction_fail_5() {	    //$this->expectException('moodle_exception');		$objectnew = new evalcomix_modes('', '', '','self');		$this->assertNotNull($objectnew);		unset($objectnew);	}	/**	* Fetch all objects with a required not existing param	*/	public function test_fetchall_fail() {		$params = array('modality'=>'alumno');		$result = evalcomix_modes::fetch_all($params);		$this->assertFalse($result);		unset($params, $result);	}			/**	* Fetch all objects. Return an array with the required params	*/	public function test_fetchall_ok() {		$params = array('modality'=>'teacher');		$result = evalcomix_modes::fetch_all($params);		$this->assertIsA($result,'array');		unset($params, $result);	}		/**	* Fetch an object with no unique params. Return false	*/	public function test_fetch_fail() {	    $this->expectException('moodle_exception');		$params = array('modality'=>'peer');		$result = evalcomix_modes::fetch($params);		unset($params, $result);	}			/**	* Fetch all objects. Return the object with the required params	*/	public function test_fetch_ok() {		$params = array('id'=>'14');		$result = evalcomix_modes::fetch($params);		$this->assertIsA($result,'evalcomix_modes');		unset($params, $result);	}			/**	* An object instance doesn't exist	*/	public function test_exist_fail() {		$objectnew = new evalcomix_modes('11');		$id = $objectnew->exist();		$this->assertFalse($id);		unset($objectnew, $id);	}		/**	* Exists	*/	public function test_exist_ok() {		//$objectnew = new evalcomix_modes('17','7','6','peer','20');		$objectnew = new evalcomix_modes('','7','6','peer','98');		$objectnew->insert();		$id = $objectnew->exist();		$objectnew->delete();		$this->assertTrue($id);		unset($objectnew, $id);	}	}